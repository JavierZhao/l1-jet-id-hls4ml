// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_16_6_0_0_0_Softmax_config18_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
output  [15:0] res_0_V;
output   res_0_V_ap_vld;
output  [15:0] res_1_V;
output   res_1_V_ap_vld;
output  [15:0] res_2_V;
output   res_2_V_ap_vld;
output  [15:0] res_3_V;
output   res_3_V_ap_vld;
output  [15:0] res_4_V;
output   res_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_0_V_ap_vld;
reg res_1_V_ap_vld;
reg res_2_V_ap_vld;
reg res_3_V_ap_vld;
reg res_4_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [16:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [16:0] exp_table1_q4;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire   [9:0] y_V_fu_609_p3;
reg   [9:0] y_V_reg_2239;
wire   [9:0] y_V_1_fu_643_p3;
reg   [9:0] y_V_1_reg_2244;
wire   [9:0] y_V_2_fu_677_p3;
reg   [9:0] y_V_2_reg_2249;
wire   [9:0] y_V_3_fu_711_p3;
reg   [9:0] y_V_3_reg_2254;
wire   [9:0] y_V_4_fu_745_p3;
reg   [9:0] y_V_4_reg_2259;
reg   [9:0] y_V_4_reg_2259_pp0_iter1_reg;
reg   [16:0] exp_res_0_V_reg_2284;
reg   [16:0] exp_res_0_V_reg_2284_pp0_iter3_reg;
reg   [16:0] exp_res_1_V_reg_2289;
reg   [16:0] exp_res_1_V_reg_2289_pp0_iter3_reg;
reg   [16:0] exp_res_2_V_reg_2294;
reg   [16:0] exp_res_2_V_reg_2294_pp0_iter3_reg;
reg   [16:0] exp_res_3_V_reg_2299;
reg   [16:0] exp_res_3_V_reg_2299_pp0_iter3_reg;
wire  signed [17:0] p_Val2_16_fu_915_p3;
reg  signed [17:0] p_Val2_16_reg_2309;
reg   [16:0] exp_res_4_V_reg_2315;
wire  signed [34:0] mul_ln1118_fu_2184_p2;
reg  signed [34:0] mul_ln1118_reg_2325;
reg   [0:0] tmp_31_reg_2331;
reg   [15:0] trunc_ln2_reg_2337;
reg   [0:0] tmp_33_reg_2342;
wire   [0:0] icmp_ln879_fu_1069_p2;
reg   [0:0] icmp_ln879_reg_2347;
wire   [0:0] icmp_ln879_1_fu_1084_p2;
reg   [0:0] icmp_ln879_1_reg_2352;
wire   [0:0] icmp_ln768_fu_1090_p2;
reg   [0:0] icmp_ln768_reg_2359;
wire  signed [34:0] mul_ln1118_1_fu_2195_p2;
reg  signed [34:0] mul_ln1118_1_reg_2364;
reg   [0:0] tmp_37_reg_2370;
reg   [15:0] trunc_ln708_1_reg_2376;
reg   [0:0] tmp_39_reg_2381;
wire   [0:0] icmp_ln879_2_fu_1131_p2;
reg   [0:0] icmp_ln879_2_reg_2386;
wire   [0:0] icmp_ln879_3_fu_1146_p2;
reg   [0:0] icmp_ln879_3_reg_2391;
wire   [0:0] icmp_ln768_1_fu_1152_p2;
reg   [0:0] icmp_ln768_1_reg_2398;
wire  signed [34:0] mul_ln1118_2_fu_2206_p2;
reg  signed [34:0] mul_ln1118_2_reg_2403;
reg   [0:0] tmp_43_reg_2409;
reg   [15:0] trunc_ln708_2_reg_2415;
reg   [0:0] tmp_45_reg_2420;
wire   [0:0] icmp_ln879_4_fu_1193_p2;
reg   [0:0] icmp_ln879_4_reg_2425;
wire   [0:0] icmp_ln879_5_fu_1208_p2;
reg   [0:0] icmp_ln879_5_reg_2430;
wire   [0:0] icmp_ln768_2_fu_1214_p2;
reg   [0:0] icmp_ln768_2_reg_2437;
wire  signed [34:0] mul_ln1118_3_fu_2217_p2;
reg  signed [34:0] mul_ln1118_3_reg_2442;
reg   [0:0] tmp_49_reg_2448;
reg   [15:0] trunc_ln708_3_reg_2454;
reg   [0:0] tmp_51_reg_2459;
wire   [0:0] icmp_ln879_6_fu_1255_p2;
reg   [0:0] icmp_ln879_6_reg_2464;
wire   [0:0] icmp_ln879_7_fu_1270_p2;
reg   [0:0] icmp_ln879_7_reg_2469;
wire   [0:0] icmp_ln768_3_fu_1276_p2;
reg   [0:0] icmp_ln768_3_reg_2476;
wire  signed [34:0] mul_ln1118_4_fu_2228_p2;
reg  signed [34:0] mul_ln1118_4_reg_2481;
reg   [0:0] tmp_55_reg_2487;
reg   [15:0] trunc_ln708_4_reg_2493;
reg   [0:0] tmp_57_reg_2498;
wire   [0:0] icmp_ln879_8_fu_1317_p2;
reg   [0:0] icmp_ln879_8_reg_2503;
wire   [0:0] icmp_ln879_9_fu_1332_p2;
reg   [0:0] icmp_ln879_9_reg_2508;
wire   [0:0] icmp_ln768_4_fu_1338_p2;
reg   [0:0] icmp_ln768_4_reg_2515;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln255_fu_753_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_757_p1;
wire   [63:0] zext_ln255_2_fu_761_p1;
wire   [63:0] zext_ln255_3_fu_765_p1;
wire   [63:0] zext_ln255_4_fu_769_p1;
wire   [63:0] zext_ln265_fu_1025_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] icmp_ln1496_fu_243_p0;
wire  signed [15:0] icmp_ln1496_fu_243_p1;
wire   [0:0] icmp_ln1496_fu_243_p2;
wire  signed [15:0] select_ln66_fu_249_p1;
wire  signed [15:0] select_ln66_fu_249_p2;
wire  signed [15:0] icmp_ln1496_1_fu_257_p0;
wire  signed [15:0] icmp_ln1496_1_fu_257_p1;
wire   [0:0] icmp_ln1496_1_fu_257_p2;
wire  signed [15:0] select_ln66_1_fu_263_p1;
wire  signed [15:0] select_ln66_1_fu_263_p2;
wire   [15:0] select_ln66_fu_249_p3;
wire   [15:0] select_ln66_1_fu_263_p3;
wire   [0:0] icmp_ln1496_2_fu_271_p2;
wire   [15:0] select_ln66_2_fu_277_p3;
wire  signed [15:0] icmp_ln1496_3_fu_285_p1;
wire   [0:0] icmp_ln1496_3_fu_285_p2;
wire  signed [15:0] x_max_V_fu_291_p1;
wire  signed [15:0] sext_ln703_fu_299_p0;
wire   [15:0] x_max_V_fu_291_p3;
wire  signed [16:0] sext_ln703_fu_299_p1;
wire  signed [16:0] sext_ln703_1_fu_303_p1;
wire   [16:0] sub_ln1193_fu_307_p2;
wire   [0:0] tmp_16_fu_321_p3;
wire   [0:0] tmp_15_fu_313_p3;
wire   [0:0] xor_ln786_fu_329_p2;
wire   [0:0] xor_ln340_fu_347_p2;
wire  signed [15:0] sext_ln703_2_fu_359_p0;
wire  signed [16:0] sext_ln703_2_fu_359_p1;
wire   [16:0] sub_ln1193_1_fu_363_p2;
wire   [0:0] tmp_18_fu_377_p3;
wire   [0:0] tmp_17_fu_369_p3;
wire   [0:0] xor_ln786_1_fu_385_p2;
wire   [0:0] xor_ln340_1_fu_403_p2;
wire  signed [15:0] sext_ln703_3_fu_415_p0;
wire  signed [16:0] sext_ln703_3_fu_415_p1;
wire   [16:0] sub_ln1193_2_fu_419_p2;
wire   [0:0] tmp_20_fu_433_p3;
wire   [0:0] tmp_19_fu_425_p3;
wire   [0:0] xor_ln786_2_fu_441_p2;
wire   [0:0] xor_ln340_2_fu_459_p2;
wire  signed [15:0] sext_ln703_4_fu_471_p0;
wire  signed [16:0] sext_ln703_4_fu_471_p1;
wire   [16:0] sub_ln1193_3_fu_475_p2;
wire   [0:0] tmp_22_fu_489_p3;
wire   [0:0] tmp_21_fu_481_p3;
wire   [0:0] xor_ln786_3_fu_497_p2;
wire   [0:0] xor_ln340_3_fu_515_p2;
wire  signed [15:0] sext_ln703_5_fu_527_p0;
wire  signed [16:0] sext_ln703_5_fu_527_p1;
wire   [16:0] sub_ln1193_4_fu_531_p2;
wire   [0:0] tmp_24_fu_545_p3;
wire   [0:0] tmp_23_fu_537_p3;
wire   [0:0] xor_ln786_4_fu_553_p2;
wire   [0:0] xor_ln340_4_fu_571_p2;
wire   [0:0] xor_ln340_5_fu_341_p2;
wire   [9:0] tmp_1_fu_583_p4;
wire   [0:0] and_ln786_fu_335_p2;
wire   [0:0] or_ln340_fu_353_p2;
wire   [9:0] select_ln340_fu_593_p3;
wire   [9:0] select_ln388_fu_601_p3;
wire   [0:0] xor_ln340_6_fu_397_p2;
wire   [9:0] tmp_3_fu_617_p4;
wire   [0:0] and_ln786_5_fu_391_p2;
wire   [0:0] or_ln340_1_fu_409_p2;
wire   [9:0] select_ln340_2_fu_627_p3;
wire   [9:0] select_ln388_1_fu_635_p3;
wire   [0:0] xor_ln340_7_fu_453_p2;
wire   [9:0] tmp_5_fu_651_p4;
wire   [0:0] and_ln786_6_fu_447_p2;
wire   [0:0] or_ln340_2_fu_465_p2;
wire   [9:0] select_ln340_4_fu_661_p3;
wire   [9:0] select_ln388_2_fu_669_p3;
wire   [0:0] xor_ln340_8_fu_509_p2;
wire   [9:0] tmp_7_fu_685_p4;
wire   [0:0] and_ln786_7_fu_503_p2;
wire   [0:0] or_ln340_3_fu_521_p2;
wire   [9:0] select_ln340_11_fu_695_p3;
wire   [9:0] select_ln388_3_fu_703_p3;
wire   [0:0] xor_ln340_9_fu_565_p2;
wire   [9:0] tmp_9_fu_719_p4;
wire   [0:0] and_ln786_8_fu_559_p2;
wire   [0:0] or_ln340_4_fu_577_p2;
wire   [9:0] select_ln340_13_fu_729_p3;
wire   [9:0] select_ln388_4_fu_737_p3;
wire   [17:0] p_Val2_7_fu_777_p1;
wire   [17:0] p_Val2_6_fu_773_p1;
wire   [17:0] p_Val2_8_fu_781_p2;
wire   [0:0] p_Result_s_fu_787_p3;
wire   [17:0] p_Val2_10_fu_807_p1;
wire   [17:0] p_Val2_9_fu_803_p1;
wire   [17:0] p_Val2_11_fu_811_p2;
wire   [0:0] p_Result_14_fu_817_p3;
wire  signed [17:0] p_Val2_12_fu_795_p3;
wire  signed [17:0] p_Val2_13_fu_825_p3;
wire  signed [18:0] lhs_V_fu_833_p1;
wire  signed [18:0] rhs_V_fu_837_p1;
wire   [18:0] ret_V_fu_841_p2;
wire   [17:0] p_Val2_15_fu_855_p2;
wire   [0:0] p_Result_16_fu_861_p3;
wire   [0:0] p_Result_15_fu_847_p3;
wire   [0:0] xor_ln786_5_fu_869_p2;
wire   [0:0] xor_ln340_11_fu_887_p2;
wire   [0:0] xor_ln340_10_fu_881_p2;
wire   [0:0] underflow_fu_875_p2;
wire   [0:0] or_ln340_5_fu_893_p2;
wire   [17:0] select_ln340_17_fu_899_p3;
wire   [17:0] select_ln388_10_fu_907_p3;
wire   [18:0] rhs_V_1_fu_930_p1;
wire  signed [18:0] lhs_V_1_fu_927_p1;
wire   [18:0] ret_V_1_fu_934_p2;
wire   [17:0] p_Val2_17_fu_923_p1;
wire   [17:0] p_Val2_19_fu_948_p2;
wire   [0:0] p_Result_18_fu_953_p3;
wire   [0:0] p_Result_17_fu_940_p3;
wire   [0:0] xor_ln786_6_fu_961_p2;
wire   [0:0] xor_ln340_13_fu_979_p2;
wire   [0:0] xor_ln340_12_fu_973_p2;
wire   [9:0] tmp_s_fu_991_p4;
wire   [0:0] underflow_1_fu_967_p2;
wire   [0:0] or_ln340_6_fu_985_p2;
wire   [9:0] select_ln340_19_fu_1001_p3;
wire   [9:0] select_ln388_11_fu_1009_p3;
wire   [9:0] y_V_5_fu_1017_p3;
wire   [7:0] tmp_2_fu_1060_p4;
wire   [8:0] tmp_4_fu_1075_p4;
wire   [7:0] tmp_fu_1122_p4;
wire   [8:0] tmp_6_fu_1137_p4;
wire   [7:0] tmp_8_fu_1184_p4;
wire   [8:0] tmp_10_fu_1199_p4;
wire   [7:0] tmp_11_fu_1246_p4;
wire   [8:0] tmp_12_fu_1261_p4;
wire   [7:0] tmp_13_fu_1308_p4;
wire   [8:0] tmp_14_fu_1323_p4;
wire   [15:0] zext_ln415_fu_1351_p1;
wire   [15:0] add_ln415_fu_1354_p2;
wire   [0:0] tmp_34_fu_1359_p3;
wire   [0:0] tmp_32_fu_1344_p3;
wire   [0:0] xor_ln416_fu_1367_p2;
wire   [0:0] and_ln416_fu_1373_p2;
wire   [0:0] tmp_36_fu_1393_p3;
wire   [0:0] xor_ln779_fu_1400_p2;
wire   [0:0] and_ln779_fu_1406_p2;
wire   [0:0] select_ln777_fu_1387_p3;
wire   [0:0] tmp_35_fu_1379_p3;
wire   [0:0] xor_ln785_fu_1423_p2;
wire   [0:0] or_ln785_fu_1429_p2;
wire   [0:0] xor_ln785_1_fu_1435_p2;
wire   [0:0] select_ln416_fu_1411_p3;
wire   [0:0] and_ln781_fu_1418_p2;
wire   [0:0] and_ln786_9_fu_1446_p2;
wire   [0:0] or_ln786_fu_1452_p2;
wire   [0:0] xor_ln786_7_fu_1458_p2;
wire   [0:0] and_ln786_10_fu_1464_p2;
wire   [0:0] and_ln785_fu_1440_p2;
wire   [0:0] or_ln340_8_fu_1475_p2;
wire   [0:0] or_ln340_7_fu_1469_p2;
wire   [0:0] or_ln340_9_fu_1481_p2;
wire   [15:0] select_ln340_5_fu_1487_p3;
wire   [15:0] select_ln388_5_fu_1495_p3;
wire   [15:0] zext_ln415_1_fu_1519_p1;
wire   [15:0] add_ln415_1_fu_1522_p2;
wire   [0:0] tmp_40_fu_1527_p3;
wire   [0:0] tmp_38_fu_1512_p3;
wire   [0:0] xor_ln416_1_fu_1535_p2;
wire   [0:0] and_ln416_1_fu_1541_p2;
wire   [0:0] tmp_42_fu_1561_p3;
wire   [0:0] xor_ln779_1_fu_1568_p2;
wire   [0:0] and_ln779_1_fu_1574_p2;
wire   [0:0] select_ln777_1_fu_1555_p3;
wire   [0:0] tmp_41_fu_1547_p3;
wire   [0:0] xor_ln785_2_fu_1591_p2;
wire   [0:0] or_ln785_1_fu_1597_p2;
wire   [0:0] xor_ln785_3_fu_1603_p2;
wire   [0:0] select_ln416_1_fu_1579_p3;
wire   [0:0] and_ln781_1_fu_1586_p2;
wire   [0:0] and_ln786_1_fu_1614_p2;
wire   [0:0] or_ln786_1_fu_1620_p2;
wire   [0:0] xor_ln786_8_fu_1626_p2;
wire   [0:0] and_ln786_11_fu_1632_p2;
wire   [0:0] and_ln785_1_fu_1608_p2;
wire   [0:0] or_ln340_11_fu_1643_p2;
wire   [0:0] or_ln340_10_fu_1637_p2;
wire   [0:0] or_ln340_12_fu_1649_p2;
wire   [15:0] select_ln340_6_fu_1655_p3;
wire   [15:0] select_ln388_6_fu_1663_p3;
wire   [15:0] zext_ln415_2_fu_1687_p1;
wire   [15:0] add_ln415_2_fu_1690_p2;
wire   [0:0] tmp_46_fu_1695_p3;
wire   [0:0] tmp_44_fu_1680_p3;
wire   [0:0] xor_ln416_2_fu_1703_p2;
wire   [0:0] and_ln416_2_fu_1709_p2;
wire   [0:0] tmp_48_fu_1729_p3;
wire   [0:0] xor_ln779_2_fu_1736_p2;
wire   [0:0] and_ln779_2_fu_1742_p2;
wire   [0:0] select_ln777_2_fu_1723_p3;
wire   [0:0] tmp_47_fu_1715_p3;
wire   [0:0] xor_ln785_4_fu_1759_p2;
wire   [0:0] or_ln785_2_fu_1765_p2;
wire   [0:0] xor_ln785_5_fu_1771_p2;
wire   [0:0] select_ln416_2_fu_1747_p3;
wire   [0:0] and_ln781_2_fu_1754_p2;
wire   [0:0] and_ln786_2_fu_1782_p2;
wire   [0:0] or_ln786_2_fu_1788_p2;
wire   [0:0] xor_ln786_9_fu_1794_p2;
wire   [0:0] and_ln786_12_fu_1800_p2;
wire   [0:0] and_ln785_2_fu_1776_p2;
wire   [0:0] or_ln340_14_fu_1811_p2;
wire   [0:0] or_ln340_13_fu_1805_p2;
wire   [0:0] or_ln340_15_fu_1817_p2;
wire   [15:0] select_ln340_7_fu_1823_p3;
wire   [15:0] select_ln388_7_fu_1831_p3;
wire   [15:0] zext_ln415_3_fu_1855_p1;
wire   [15:0] add_ln415_3_fu_1858_p2;
wire   [0:0] tmp_52_fu_1863_p3;
wire   [0:0] tmp_50_fu_1848_p3;
wire   [0:0] xor_ln416_3_fu_1871_p2;
wire   [0:0] and_ln416_3_fu_1877_p2;
wire   [0:0] tmp_54_fu_1897_p3;
wire   [0:0] xor_ln779_3_fu_1904_p2;
wire   [0:0] and_ln779_3_fu_1910_p2;
wire   [0:0] select_ln777_3_fu_1891_p3;
wire   [0:0] tmp_53_fu_1883_p3;
wire   [0:0] xor_ln785_6_fu_1927_p2;
wire   [0:0] or_ln785_3_fu_1933_p2;
wire   [0:0] xor_ln785_7_fu_1939_p2;
wire   [0:0] select_ln416_3_fu_1915_p3;
wire   [0:0] and_ln781_3_fu_1922_p2;
wire   [0:0] and_ln786_3_fu_1950_p2;
wire   [0:0] or_ln786_3_fu_1956_p2;
wire   [0:0] xor_ln786_10_fu_1962_p2;
wire   [0:0] and_ln786_13_fu_1968_p2;
wire   [0:0] and_ln785_3_fu_1944_p2;
wire   [0:0] or_ln340_17_fu_1979_p2;
wire   [0:0] or_ln340_16_fu_1973_p2;
wire   [0:0] or_ln340_18_fu_1985_p2;
wire   [15:0] select_ln340_8_fu_1991_p3;
wire   [15:0] select_ln388_8_fu_1999_p3;
wire   [15:0] zext_ln415_4_fu_2023_p1;
wire   [15:0] add_ln415_4_fu_2026_p2;
wire   [0:0] tmp_58_fu_2031_p3;
wire   [0:0] tmp_56_fu_2016_p3;
wire   [0:0] xor_ln416_4_fu_2039_p2;
wire   [0:0] and_ln416_4_fu_2045_p2;
wire   [0:0] tmp_60_fu_2065_p3;
wire   [0:0] xor_ln779_4_fu_2072_p2;
wire   [0:0] and_ln779_4_fu_2078_p2;
wire   [0:0] select_ln777_4_fu_2059_p3;
wire   [0:0] tmp_59_fu_2051_p3;
wire   [0:0] xor_ln785_8_fu_2095_p2;
wire   [0:0] or_ln785_4_fu_2101_p2;
wire   [0:0] xor_ln785_9_fu_2107_p2;
wire   [0:0] select_ln416_4_fu_2083_p3;
wire   [0:0] and_ln781_4_fu_2090_p2;
wire   [0:0] and_ln786_4_fu_2118_p2;
wire   [0:0] or_ln786_4_fu_2124_p2;
wire   [0:0] xor_ln786_11_fu_2130_p2;
wire   [0:0] and_ln786_14_fu_2136_p2;
wire   [0:0] and_ln785_4_fu_2112_p2;
wire   [0:0] or_ln340_20_fu_2147_p2;
wire   [0:0] or_ln340_19_fu_2141_p2;
wire   [0:0] or_ln340_21_fu_2153_p2;
wire   [15:0] select_ln340_9_fu_2159_p3;
wire   [15:0] select_ln388_9_fu_2167_p3;
wire   [16:0] mul_ln1118_fu_2184_p0;
wire  signed [17:0] mul_ln1118_fu_2184_p1;
wire  signed [34:0] sext_ln1116_fu_1030_p1;
wire   [16:0] mul_ln1118_1_fu_2195_p0;
wire  signed [17:0] mul_ln1118_1_fu_2195_p1;
wire   [16:0] mul_ln1118_2_fu_2206_p0;
wire  signed [17:0] mul_ln1118_2_fu_2206_p1;
wire   [16:0] mul_ln1118_3_fu_2217_p0;
wire  signed [17:0] mul_ln1118_3_fu_2217_p1;
wire   [16:0] mul_ln1118_4_fu_2228_p0;
wire  signed [17:0] mul_ln1118_4_fu_2228_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [34:0] mul_ln1118_1_fu_2195_p00;
wire   [34:0] mul_ln1118_2_fu_2206_p00;
wire   [34:0] mul_ln1118_3_fu_2217_p00;
wire   [34:0] mul_ln1118_4_fu_2228_p00;
wire   [34:0] mul_ln1118_fu_2184_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

softmax_stable_ap_fixed_ap_fixed_16_6_0_0_0_Softmax_config18_s_exp_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4)
);

softmax_stable_ap_fixed_ap_fixed_16_6_0_0_0_Softmax_config18_s_invert_table2 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_17ns_18s_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
myproject_mul_mul_17ns_18s_35_1_1_U2166(
    .din0(mul_ln1118_fu_2184_p0),
    .din1(mul_ln1118_fu_2184_p1),
    .dout(mul_ln1118_fu_2184_p2)
);

myproject_mul_mul_17ns_18s_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
myproject_mul_mul_17ns_18s_35_1_1_U2167(
    .din0(mul_ln1118_1_fu_2195_p0),
    .din1(mul_ln1118_1_fu_2195_p1),
    .dout(mul_ln1118_1_fu_2195_p2)
);

myproject_mul_mul_17ns_18s_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
myproject_mul_mul_17ns_18s_35_1_1_U2168(
    .din0(mul_ln1118_2_fu_2206_p0),
    .din1(mul_ln1118_2_fu_2206_p1),
    .dout(mul_ln1118_2_fu_2206_p2)
);

myproject_mul_mul_17ns_18s_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
myproject_mul_mul_17ns_18s_35_1_1_U2169(
    .din0(mul_ln1118_3_fu_2217_p0),
    .din1(mul_ln1118_3_fu_2217_p1),
    .dout(mul_ln1118_3_fu_2217_p2)
);

myproject_mul_mul_17ns_18s_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 35 ))
myproject_mul_mul_17ns_18s_35_1_1_U2170(
    .din0(mul_ln1118_4_fu_2228_p0),
    .din1(mul_ln1118_4_fu_2228_p1),
    .dout(mul_ln1118_4_fu_2228_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_res_0_V_reg_2284 <= exp_table1_q0;
        exp_res_1_V_reg_2289 <= exp_table1_q1;
        exp_res_2_V_reg_2294 <= exp_table1_q2;
        exp_res_3_V_reg_2299 <= exp_table1_q3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_res_0_V_reg_2284_pp0_iter3_reg <= exp_res_0_V_reg_2284;
        exp_res_1_V_reg_2289_pp0_iter3_reg <= exp_res_1_V_reg_2289;
        exp_res_2_V_reg_2294_pp0_iter3_reg <= exp_res_2_V_reg_2294;
        exp_res_3_V_reg_2299_pp0_iter3_reg <= exp_res_3_V_reg_2299;
        icmp_ln768_1_reg_2398 <= icmp_ln768_1_fu_1152_p2;
        icmp_ln768_2_reg_2437 <= icmp_ln768_2_fu_1214_p2;
        icmp_ln768_3_reg_2476 <= icmp_ln768_3_fu_1276_p2;
        icmp_ln768_4_reg_2515 <= icmp_ln768_4_fu_1338_p2;
        icmp_ln768_reg_2359 <= icmp_ln768_fu_1090_p2;
        icmp_ln879_1_reg_2352 <= icmp_ln879_1_fu_1084_p2;
        icmp_ln879_2_reg_2386 <= icmp_ln879_2_fu_1131_p2;
        icmp_ln879_3_reg_2391 <= icmp_ln879_3_fu_1146_p2;
        icmp_ln879_4_reg_2425 <= icmp_ln879_4_fu_1193_p2;
        icmp_ln879_5_reg_2430 <= icmp_ln879_5_fu_1208_p2;
        icmp_ln879_6_reg_2464 <= icmp_ln879_6_fu_1255_p2;
        icmp_ln879_7_reg_2469 <= icmp_ln879_7_fu_1270_p2;
        icmp_ln879_8_reg_2503 <= icmp_ln879_8_fu_1317_p2;
        icmp_ln879_9_reg_2508 <= icmp_ln879_9_fu_1332_p2;
        icmp_ln879_reg_2347 <= icmp_ln879_fu_1069_p2;
        mul_ln1118_1_reg_2364 <= mul_ln1118_1_fu_2195_p2;
        mul_ln1118_2_reg_2403 <= mul_ln1118_2_fu_2206_p2;
        mul_ln1118_3_reg_2442 <= mul_ln1118_3_fu_2217_p2;
        mul_ln1118_4_reg_2481 <= mul_ln1118_4_fu_2228_p2;
        mul_ln1118_reg_2325 <= mul_ln1118_fu_2184_p2;
        p_Val2_16_reg_2309 <= p_Val2_16_fu_915_p3;
        tmp_31_reg_2331 <= mul_ln1118_fu_2184_p2[32'd34];
        tmp_33_reg_2342 <= mul_ln1118_fu_2184_p2[32'd9];
        tmp_37_reg_2370 <= mul_ln1118_1_fu_2195_p2[32'd34];
        tmp_39_reg_2381 <= mul_ln1118_1_fu_2195_p2[32'd9];
        tmp_43_reg_2409 <= mul_ln1118_2_fu_2206_p2[32'd34];
        tmp_45_reg_2420 <= mul_ln1118_2_fu_2206_p2[32'd9];
        tmp_49_reg_2448 <= mul_ln1118_3_fu_2217_p2[32'd34];
        tmp_51_reg_2459 <= mul_ln1118_3_fu_2217_p2[32'd9];
        tmp_55_reg_2487 <= mul_ln1118_4_fu_2228_p2[32'd34];
        tmp_57_reg_2498 <= mul_ln1118_4_fu_2228_p2[32'd9];
        trunc_ln2_reg_2337 <= {{mul_ln1118_fu_2184_p2[25:10]}};
        trunc_ln708_1_reg_2376 <= {{mul_ln1118_1_fu_2195_p2[25:10]}};
        trunc_ln708_2_reg_2415 <= {{mul_ln1118_2_fu_2206_p2[25:10]}};
        trunc_ln708_3_reg_2454 <= {{mul_ln1118_3_fu_2217_p2[25:10]}};
        trunc_ln708_4_reg_2493 <= {{mul_ln1118_4_fu_2228_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        exp_res_4_V_reg_2315 <= exp_table1_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_V_1_reg_2244 <= y_V_1_fu_643_p3;
        y_V_2_reg_2249 <= y_V_2_fu_677_p3;
        y_V_3_reg_2254 <= y_V_3_fu_711_p3;
        y_V_4_reg_2259 <= y_V_4_fu_745_p3;
        y_V_4_reg_2259_pp0_iter1_reg <= y_V_4_reg_2259;
        y_V_reg_2239 <= y_V_fu_609_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_1_fu_1522_p2 = (zext_ln415_1_fu_1519_p1 + trunc_ln708_1_reg_2376);

assign add_ln415_2_fu_1690_p2 = (zext_ln415_2_fu_1687_p1 + trunc_ln708_2_reg_2415);

assign add_ln415_3_fu_1858_p2 = (zext_ln415_3_fu_1855_p1 + trunc_ln708_3_reg_2454);

assign add_ln415_4_fu_2026_p2 = (zext_ln415_4_fu_2023_p1 + trunc_ln708_4_reg_2493);

assign add_ln415_fu_1354_p2 = (zext_ln415_fu_1351_p1 + trunc_ln2_reg_2337);

assign and_ln416_1_fu_1541_p2 = (xor_ln416_1_fu_1535_p2 & tmp_38_fu_1512_p3);

assign and_ln416_2_fu_1709_p2 = (xor_ln416_2_fu_1703_p2 & tmp_44_fu_1680_p3);

assign and_ln416_3_fu_1877_p2 = (xor_ln416_3_fu_1871_p2 & tmp_50_fu_1848_p3);

assign and_ln416_4_fu_2045_p2 = (xor_ln416_4_fu_2039_p2 & tmp_56_fu_2016_p3);

assign and_ln416_fu_1373_p2 = (xor_ln416_fu_1367_p2 & tmp_32_fu_1344_p3);

assign and_ln779_1_fu_1574_p2 = (xor_ln779_1_fu_1568_p2 & icmp_ln879_2_reg_2386);

assign and_ln779_2_fu_1742_p2 = (xor_ln779_2_fu_1736_p2 & icmp_ln879_4_reg_2425);

assign and_ln779_3_fu_1910_p2 = (xor_ln779_3_fu_1904_p2 & icmp_ln879_6_reg_2464);

assign and_ln779_4_fu_2078_p2 = (xor_ln779_4_fu_2072_p2 & icmp_ln879_8_reg_2503);

assign and_ln779_fu_1406_p2 = (xor_ln779_fu_1400_p2 & icmp_ln879_reg_2347);

assign and_ln781_1_fu_1586_p2 = (icmp_ln879_3_reg_2391 & and_ln416_1_fu_1541_p2);

assign and_ln781_2_fu_1754_p2 = (icmp_ln879_5_reg_2430 & and_ln416_2_fu_1709_p2);

assign and_ln781_3_fu_1922_p2 = (icmp_ln879_7_reg_2469 & and_ln416_3_fu_1877_p2);

assign and_ln781_4_fu_2090_p2 = (icmp_ln879_9_reg_2508 & and_ln416_4_fu_2045_p2);

assign and_ln781_fu_1418_p2 = (icmp_ln879_1_reg_2352 & and_ln416_fu_1373_p2);

assign and_ln785_1_fu_1608_p2 = (xor_ln785_3_fu_1603_p2 & or_ln785_1_fu_1597_p2);

assign and_ln785_2_fu_1776_p2 = (xor_ln785_5_fu_1771_p2 & or_ln785_2_fu_1765_p2);

assign and_ln785_3_fu_1944_p2 = (xor_ln785_7_fu_1939_p2 & or_ln785_3_fu_1933_p2);

assign and_ln785_4_fu_2112_p2 = (xor_ln785_9_fu_2107_p2 & or_ln785_4_fu_2101_p2);

assign and_ln785_fu_1440_p2 = (xor_ln785_1_fu_1435_p2 & or_ln785_fu_1429_p2);

assign and_ln786_10_fu_1464_p2 = (xor_ln786_7_fu_1458_p2 & tmp_31_reg_2331);

assign and_ln786_11_fu_1632_p2 = (xor_ln786_8_fu_1626_p2 & tmp_37_reg_2370);

assign and_ln786_12_fu_1800_p2 = (xor_ln786_9_fu_1794_p2 & tmp_43_reg_2409);

assign and_ln786_13_fu_1968_p2 = (xor_ln786_10_fu_1962_p2 & tmp_49_reg_2448);

assign and_ln786_14_fu_2136_p2 = (xor_ln786_11_fu_2130_p2 & tmp_55_reg_2487);

assign and_ln786_1_fu_1614_p2 = (tmp_41_fu_1547_p3 & select_ln416_1_fu_1579_p3);

assign and_ln786_2_fu_1782_p2 = (tmp_47_fu_1715_p3 & select_ln416_2_fu_1747_p3);

assign and_ln786_3_fu_1950_p2 = (tmp_53_fu_1883_p3 & select_ln416_3_fu_1915_p3);

assign and_ln786_4_fu_2118_p2 = (tmp_59_fu_2051_p3 & select_ln416_4_fu_2083_p3);

assign and_ln786_5_fu_391_p2 = (xor_ln786_1_fu_385_p2 & tmp_17_fu_369_p3);

assign and_ln786_6_fu_447_p2 = (xor_ln786_2_fu_441_p2 & tmp_19_fu_425_p3);

assign and_ln786_7_fu_503_p2 = (xor_ln786_3_fu_497_p2 & tmp_21_fu_481_p3);

assign and_ln786_8_fu_559_p2 = (xor_ln786_4_fu_553_p2 & tmp_23_fu_537_p3);

assign and_ln786_9_fu_1446_p2 = (tmp_35_fu_1379_p3 & select_ln416_fu_1411_p3);

assign and_ln786_fu_335_p2 = (xor_ln786_fu_329_p2 & tmp_15_fu_313_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_table1_address0 = zext_ln255_fu_753_p1;

assign exp_table1_address1 = zext_ln255_1_fu_757_p1;

assign exp_table1_address2 = zext_ln255_2_fu_761_p1;

assign exp_table1_address3 = zext_ln255_3_fu_765_p1;

assign exp_table1_address4 = zext_ln255_4_fu_769_p1;

assign icmp_ln1496_1_fu_257_p0 = data_2_V_read;

assign icmp_ln1496_1_fu_257_p1 = data_3_V_read;

assign icmp_ln1496_1_fu_257_p2 = (($signed(icmp_ln1496_1_fu_257_p0) < $signed(icmp_ln1496_1_fu_257_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_271_p2 = (($signed(select_ln66_fu_249_p3) < $signed(select_ln66_1_fu_263_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_285_p1 = data_4_V_read;

assign icmp_ln1496_3_fu_285_p2 = (($signed(select_ln66_2_fu_277_p3) < $signed(icmp_ln1496_3_fu_285_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_243_p0 = data_0_V_read;

assign icmp_ln1496_fu_243_p1 = data_1_V_read;

assign icmp_ln1496_fu_243_p2 = (($signed(icmp_ln1496_fu_243_p0) < $signed(icmp_ln1496_fu_243_p1)) ? 1'b1 : 1'b0);

assign icmp_ln768_1_fu_1152_p2 = ((tmp_6_fu_1137_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_2_fu_1214_p2 = ((tmp_10_fu_1199_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_3_fu_1276_p2 = ((tmp_12_fu_1261_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_4_fu_1338_p2 = ((tmp_14_fu_1323_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_1090_p2 = ((tmp_4_fu_1075_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_1084_p2 = ((tmp_4_fu_1075_p4 == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_1131_p2 = ((tmp_fu_1122_p4 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_1146_p2 = ((tmp_6_fu_1137_p4 == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_1193_p2 = ((tmp_8_fu_1184_p4 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_1208_p2 = ((tmp_10_fu_1199_p4 == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_1255_p2 = ((tmp_11_fu_1246_p4 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln879_7_fu_1270_p2 = ((tmp_12_fu_1261_p4 == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln879_8_fu_1317_p2 = ((tmp_13_fu_1308_p4 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln879_9_fu_1332_p2 = ((tmp_14_fu_1323_p4 == 9'd511) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1069_p2 = ((tmp_2_fu_1060_p4 == 8'd255) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln265_fu_1025_p1;

assign lhs_V_1_fu_927_p1 = p_Val2_16_reg_2309;

assign lhs_V_fu_833_p1 = p_Val2_12_fu_795_p3;

assign mul_ln1118_1_fu_2195_p0 = mul_ln1118_1_fu_2195_p00;

assign mul_ln1118_1_fu_2195_p00 = exp_res_1_V_reg_2289_pp0_iter3_reg;

assign mul_ln1118_1_fu_2195_p1 = sext_ln1116_fu_1030_p1;

assign mul_ln1118_2_fu_2206_p0 = mul_ln1118_2_fu_2206_p00;

assign mul_ln1118_2_fu_2206_p00 = exp_res_2_V_reg_2294_pp0_iter3_reg;

assign mul_ln1118_2_fu_2206_p1 = sext_ln1116_fu_1030_p1;

assign mul_ln1118_3_fu_2217_p0 = mul_ln1118_3_fu_2217_p00;

assign mul_ln1118_3_fu_2217_p00 = exp_res_3_V_reg_2299_pp0_iter3_reg;

assign mul_ln1118_3_fu_2217_p1 = sext_ln1116_fu_1030_p1;

assign mul_ln1118_4_fu_2228_p0 = mul_ln1118_4_fu_2228_p00;

assign mul_ln1118_4_fu_2228_p00 = exp_res_4_V_reg_2315;

assign mul_ln1118_4_fu_2228_p1 = sext_ln1116_fu_1030_p1;

assign mul_ln1118_fu_2184_p0 = mul_ln1118_fu_2184_p00;

assign mul_ln1118_fu_2184_p00 = exp_res_0_V_reg_2284_pp0_iter3_reg;

assign mul_ln1118_fu_2184_p1 = sext_ln1116_fu_1030_p1;

assign or_ln340_10_fu_1637_p2 = (and_ln786_11_fu_1632_p2 | and_ln785_1_fu_1608_p2);

assign or_ln340_11_fu_1643_p2 = (xor_ln785_3_fu_1603_p2 | and_ln786_1_fu_1614_p2);

assign or_ln340_12_fu_1649_p2 = (or_ln340_11_fu_1643_p2 | and_ln781_1_fu_1586_p2);

assign or_ln340_13_fu_1805_p2 = (and_ln786_12_fu_1800_p2 | and_ln785_2_fu_1776_p2);

assign or_ln340_14_fu_1811_p2 = (xor_ln785_5_fu_1771_p2 | and_ln786_2_fu_1782_p2);

assign or_ln340_15_fu_1817_p2 = (or_ln340_14_fu_1811_p2 | and_ln781_2_fu_1754_p2);

assign or_ln340_16_fu_1973_p2 = (and_ln786_13_fu_1968_p2 | and_ln785_3_fu_1944_p2);

assign or_ln340_17_fu_1979_p2 = (xor_ln785_7_fu_1939_p2 | and_ln786_3_fu_1950_p2);

assign or_ln340_18_fu_1985_p2 = (or_ln340_17_fu_1979_p2 | and_ln781_3_fu_1922_p2);

assign or_ln340_19_fu_2141_p2 = (and_ln786_14_fu_2136_p2 | and_ln785_4_fu_2112_p2);

assign or_ln340_1_fu_409_p2 = (xor_ln340_1_fu_403_p2 | tmp_18_fu_377_p3);

assign or_ln340_20_fu_2147_p2 = (xor_ln785_9_fu_2107_p2 | and_ln786_4_fu_2118_p2);

assign or_ln340_21_fu_2153_p2 = (or_ln340_20_fu_2147_p2 | and_ln781_4_fu_2090_p2);

assign or_ln340_2_fu_465_p2 = (xor_ln340_2_fu_459_p2 | tmp_20_fu_433_p3);

assign or_ln340_3_fu_521_p2 = (xor_ln340_3_fu_515_p2 | tmp_22_fu_489_p3);

assign or_ln340_4_fu_577_p2 = (xor_ln340_4_fu_571_p2 | tmp_24_fu_545_p3);

assign or_ln340_5_fu_893_p2 = (xor_ln340_11_fu_887_p2 | p_Result_16_fu_861_p3);

assign or_ln340_6_fu_985_p2 = (xor_ln340_13_fu_979_p2 | p_Result_18_fu_953_p3);

assign or_ln340_7_fu_1469_p2 = (and_ln786_10_fu_1464_p2 | and_ln785_fu_1440_p2);

assign or_ln340_8_fu_1475_p2 = (xor_ln785_1_fu_1435_p2 | and_ln786_9_fu_1446_p2);

assign or_ln340_9_fu_1481_p2 = (or_ln340_8_fu_1475_p2 | and_ln781_fu_1418_p2);

assign or_ln340_fu_353_p2 = (xor_ln340_fu_347_p2 | tmp_16_fu_321_p3);

assign or_ln785_1_fu_1597_p2 = (xor_ln785_2_fu_1591_p2 | tmp_41_fu_1547_p3);

assign or_ln785_2_fu_1765_p2 = (xor_ln785_4_fu_1759_p2 | tmp_47_fu_1715_p3);

assign or_ln785_3_fu_1933_p2 = (xor_ln785_6_fu_1927_p2 | tmp_53_fu_1883_p3);

assign or_ln785_4_fu_2101_p2 = (xor_ln785_8_fu_2095_p2 | tmp_59_fu_2051_p3);

assign or_ln785_fu_1429_p2 = (xor_ln785_fu_1423_p2 | tmp_35_fu_1379_p3);

assign or_ln786_1_fu_1620_p2 = (and_ln786_1_fu_1614_p2 | and_ln781_1_fu_1586_p2);

assign or_ln786_2_fu_1788_p2 = (and_ln786_2_fu_1782_p2 | and_ln781_2_fu_1754_p2);

assign or_ln786_3_fu_1956_p2 = (and_ln786_3_fu_1950_p2 | and_ln781_3_fu_1922_p2);

assign or_ln786_4_fu_2124_p2 = (and_ln786_4_fu_2118_p2 | and_ln781_4_fu_2090_p2);

assign or_ln786_fu_1452_p2 = (and_ln786_9_fu_1446_p2 | and_ln781_fu_1418_p2);

assign p_Result_14_fu_817_p3 = p_Val2_11_fu_811_p2[32'd17];

assign p_Result_15_fu_847_p3 = ret_V_fu_841_p2[32'd18];

assign p_Result_16_fu_861_p3 = p_Val2_15_fu_855_p2[32'd17];

assign p_Result_17_fu_940_p3 = ret_V_1_fu_934_p2[32'd18];

assign p_Result_18_fu_953_p3 = p_Val2_19_fu_948_p2[32'd17];

assign p_Result_s_fu_787_p3 = p_Val2_8_fu_781_p2[32'd17];

assign p_Val2_10_fu_807_p1 = exp_table1_q3;

assign p_Val2_11_fu_811_p2 = (p_Val2_10_fu_807_p1 + p_Val2_9_fu_803_p1);

assign p_Val2_12_fu_795_p3 = ((p_Result_s_fu_787_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_8_fu_781_p2);

assign p_Val2_13_fu_825_p3 = ((p_Result_14_fu_817_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_11_fu_811_p2);

assign p_Val2_15_fu_855_p2 = ($signed(p_Val2_13_fu_825_p3) + $signed(p_Val2_12_fu_795_p3));

assign p_Val2_16_fu_915_p3 = ((or_ln340_5_fu_893_p2[0:0] === 1'b1) ? select_ln340_17_fu_899_p3 : select_ln388_10_fu_907_p3);

assign p_Val2_17_fu_923_p1 = exp_table1_q4;

assign p_Val2_19_fu_948_p2 = ($signed(p_Val2_16_reg_2309) + $signed(p_Val2_17_fu_923_p1));

assign p_Val2_6_fu_773_p1 = exp_table1_q0;

assign p_Val2_7_fu_777_p1 = exp_table1_q1;

assign p_Val2_8_fu_781_p2 = (p_Val2_7_fu_777_p1 + p_Val2_6_fu_773_p1);

assign p_Val2_9_fu_803_p1 = exp_table1_q2;

assign res_0_V = ((or_ln340_9_fu_1481_p2[0:0] === 1'b1) ? select_ln340_5_fu_1487_p3 : select_ln388_5_fu_1495_p3);

assign res_1_V = ((or_ln340_12_fu_1649_p2[0:0] === 1'b1) ? select_ln340_6_fu_1655_p3 : select_ln388_6_fu_1663_p3);

assign res_2_V = ((or_ln340_15_fu_1817_p2[0:0] === 1'b1) ? select_ln340_7_fu_1823_p3 : select_ln388_7_fu_1831_p3);

assign res_3_V = ((or_ln340_18_fu_1985_p2[0:0] === 1'b1) ? select_ln340_8_fu_1991_p3 : select_ln388_8_fu_1999_p3);

assign res_4_V = ((or_ln340_21_fu_2153_p2[0:0] === 1'b1) ? select_ln340_9_fu_2159_p3 : select_ln388_9_fu_2167_p3);

assign ret_V_1_fu_934_p2 = ($signed(rhs_V_1_fu_930_p1) + $signed(lhs_V_1_fu_927_p1));

assign ret_V_fu_841_p2 = ($signed(lhs_V_fu_833_p1) + $signed(rhs_V_fu_837_p1));

assign rhs_V_1_fu_930_p1 = exp_table1_q4;

assign rhs_V_fu_837_p1 = p_Val2_13_fu_825_p3;

assign select_ln340_11_fu_695_p3 = ((xor_ln340_8_fu_509_p2[0:0] === 1'b1) ? 10'd511 : tmp_7_fu_685_p4);

assign select_ln340_13_fu_729_p3 = ((xor_ln340_9_fu_565_p2[0:0] === 1'b1) ? 10'd511 : tmp_9_fu_719_p4);

assign select_ln340_17_fu_899_p3 = ((xor_ln340_10_fu_881_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_15_fu_855_p2);

assign select_ln340_19_fu_1001_p3 = ((xor_ln340_12_fu_973_p2[0:0] === 1'b1) ? 10'd511 : tmp_s_fu_991_p4);

assign select_ln340_2_fu_627_p3 = ((xor_ln340_6_fu_397_p2[0:0] === 1'b1) ? 10'd511 : tmp_3_fu_617_p4);

assign select_ln340_4_fu_661_p3 = ((xor_ln340_7_fu_453_p2[0:0] === 1'b1) ? 10'd511 : tmp_5_fu_651_p4);

assign select_ln340_5_fu_1487_p3 = ((or_ln340_7_fu_1469_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_fu_1354_p2);

assign select_ln340_6_fu_1655_p3 = ((or_ln340_10_fu_1637_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_1_fu_1522_p2);

assign select_ln340_7_fu_1823_p3 = ((or_ln340_13_fu_1805_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_2_fu_1690_p2);

assign select_ln340_8_fu_1991_p3 = ((or_ln340_16_fu_1973_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_3_fu_1858_p2);

assign select_ln340_9_fu_2159_p3 = ((or_ln340_19_fu_2141_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_4_fu_2026_p2);

assign select_ln340_fu_593_p3 = ((xor_ln340_5_fu_341_p2[0:0] === 1'b1) ? 10'd511 : tmp_1_fu_583_p4);

assign select_ln388_10_fu_907_p3 = ((underflow_fu_875_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_15_fu_855_p2);

assign select_ln388_11_fu_1009_p3 = ((underflow_1_fu_967_p2[0:0] === 1'b1) ? 10'd512 : tmp_s_fu_991_p4);

assign select_ln388_1_fu_635_p3 = ((and_ln786_5_fu_391_p2[0:0] === 1'b1) ? 10'd512 : tmp_3_fu_617_p4);

assign select_ln388_2_fu_669_p3 = ((and_ln786_6_fu_447_p2[0:0] === 1'b1) ? 10'd512 : tmp_5_fu_651_p4);

assign select_ln388_3_fu_703_p3 = ((and_ln786_7_fu_503_p2[0:0] === 1'b1) ? 10'd512 : tmp_7_fu_685_p4);

assign select_ln388_4_fu_737_p3 = ((and_ln786_8_fu_559_p2[0:0] === 1'b1) ? 10'd512 : tmp_9_fu_719_p4);

assign select_ln388_5_fu_1495_p3 = ((and_ln786_10_fu_1464_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_fu_1354_p2);

assign select_ln388_6_fu_1663_p3 = ((and_ln786_11_fu_1632_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_1_fu_1522_p2);

assign select_ln388_7_fu_1831_p3 = ((and_ln786_12_fu_1800_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_2_fu_1690_p2);

assign select_ln388_8_fu_1999_p3 = ((and_ln786_13_fu_1968_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_3_fu_1858_p2);

assign select_ln388_9_fu_2167_p3 = ((and_ln786_14_fu_2136_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_4_fu_2026_p2);

assign select_ln388_fu_601_p3 = ((and_ln786_fu_335_p2[0:0] === 1'b1) ? 10'd512 : tmp_1_fu_583_p4);

assign select_ln416_1_fu_1579_p3 = ((and_ln416_1_fu_1541_p2[0:0] === 1'b1) ? and_ln779_1_fu_1574_p2 : icmp_ln879_3_reg_2391);

assign select_ln416_2_fu_1747_p3 = ((and_ln416_2_fu_1709_p2[0:0] === 1'b1) ? and_ln779_2_fu_1742_p2 : icmp_ln879_5_reg_2430);

assign select_ln416_3_fu_1915_p3 = ((and_ln416_3_fu_1877_p2[0:0] === 1'b1) ? and_ln779_3_fu_1910_p2 : icmp_ln879_7_reg_2469);

assign select_ln416_4_fu_2083_p3 = ((and_ln416_4_fu_2045_p2[0:0] === 1'b1) ? and_ln779_4_fu_2078_p2 : icmp_ln879_9_reg_2508);

assign select_ln416_fu_1411_p3 = ((and_ln416_fu_1373_p2[0:0] === 1'b1) ? and_ln779_fu_1406_p2 : icmp_ln879_1_reg_2352);

assign select_ln66_1_fu_263_p1 = data_3_V_read;

assign select_ln66_1_fu_263_p2 = data_2_V_read;

assign select_ln66_1_fu_263_p3 = ((icmp_ln1496_1_fu_257_p2[0:0] === 1'b1) ? select_ln66_1_fu_263_p1 : select_ln66_1_fu_263_p2);

assign select_ln66_2_fu_277_p3 = ((icmp_ln1496_2_fu_271_p2[0:0] === 1'b1) ? select_ln66_1_fu_263_p3 : select_ln66_fu_249_p3);

assign select_ln66_fu_249_p1 = data_1_V_read;

assign select_ln66_fu_249_p2 = data_0_V_read;

assign select_ln66_fu_249_p3 = ((icmp_ln1496_fu_243_p2[0:0] === 1'b1) ? select_ln66_fu_249_p1 : select_ln66_fu_249_p2);

assign select_ln777_1_fu_1555_p3 = ((and_ln416_1_fu_1541_p2[0:0] === 1'b1) ? icmp_ln879_3_reg_2391 : icmp_ln768_1_reg_2398);

assign select_ln777_2_fu_1723_p3 = ((and_ln416_2_fu_1709_p2[0:0] === 1'b1) ? icmp_ln879_5_reg_2430 : icmp_ln768_2_reg_2437);

assign select_ln777_3_fu_1891_p3 = ((and_ln416_3_fu_1877_p2[0:0] === 1'b1) ? icmp_ln879_7_reg_2469 : icmp_ln768_3_reg_2476);

assign select_ln777_4_fu_2059_p3 = ((and_ln416_4_fu_2045_p2[0:0] === 1'b1) ? icmp_ln879_9_reg_2508 : icmp_ln768_4_reg_2515);

assign select_ln777_fu_1387_p3 = ((and_ln416_fu_1373_p2[0:0] === 1'b1) ? icmp_ln879_1_reg_2352 : icmp_ln768_reg_2359);

assign sext_ln1116_fu_1030_p1 = $signed(invert_table2_q0);

assign sext_ln703_1_fu_303_p1 = $signed(x_max_V_fu_291_p3);

assign sext_ln703_2_fu_359_p0 = data_1_V_read;

assign sext_ln703_2_fu_359_p1 = sext_ln703_2_fu_359_p0;

assign sext_ln703_3_fu_415_p0 = data_2_V_read;

assign sext_ln703_3_fu_415_p1 = sext_ln703_3_fu_415_p0;

assign sext_ln703_4_fu_471_p0 = data_3_V_read;

assign sext_ln703_4_fu_471_p1 = sext_ln703_4_fu_471_p0;

assign sext_ln703_5_fu_527_p0 = data_4_V_read;

assign sext_ln703_5_fu_527_p1 = sext_ln703_5_fu_527_p0;

assign sext_ln703_fu_299_p0 = data_0_V_read;

assign sext_ln703_fu_299_p1 = sext_ln703_fu_299_p0;

assign sub_ln1193_1_fu_363_p2 = ($signed(sext_ln703_2_fu_359_p1) - $signed(sext_ln703_1_fu_303_p1));

assign sub_ln1193_2_fu_419_p2 = ($signed(sext_ln703_3_fu_415_p1) - $signed(sext_ln703_1_fu_303_p1));

assign sub_ln1193_3_fu_475_p2 = ($signed(sext_ln703_4_fu_471_p1) - $signed(sext_ln703_1_fu_303_p1));

assign sub_ln1193_4_fu_531_p2 = ($signed(sext_ln703_5_fu_527_p1) - $signed(sext_ln703_1_fu_303_p1));

assign sub_ln1193_fu_307_p2 = ($signed(sext_ln703_fu_299_p1) - $signed(sext_ln703_1_fu_303_p1));

assign tmp_10_fu_1199_p4 = {{mul_ln1118_2_fu_2206_p2[34:26]}};

assign tmp_11_fu_1246_p4 = {{mul_ln1118_3_fu_2217_p2[34:27]}};

assign tmp_12_fu_1261_p4 = {{mul_ln1118_3_fu_2217_p2[34:26]}};

assign tmp_13_fu_1308_p4 = {{mul_ln1118_4_fu_2228_p2[34:27]}};

assign tmp_14_fu_1323_p4 = {{mul_ln1118_4_fu_2228_p2[34:26]}};

assign tmp_15_fu_313_p3 = sub_ln1193_fu_307_p2[32'd16];

assign tmp_16_fu_321_p3 = sub_ln1193_fu_307_p2[32'd15];

assign tmp_17_fu_369_p3 = sub_ln1193_1_fu_363_p2[32'd16];

assign tmp_18_fu_377_p3 = sub_ln1193_1_fu_363_p2[32'd15];

assign tmp_19_fu_425_p3 = sub_ln1193_2_fu_419_p2[32'd16];

assign tmp_1_fu_583_p4 = {{sub_ln1193_fu_307_p2[15:6]}};

assign tmp_20_fu_433_p3 = sub_ln1193_2_fu_419_p2[32'd15];

assign tmp_21_fu_481_p3 = sub_ln1193_3_fu_475_p2[32'd16];

assign tmp_22_fu_489_p3 = sub_ln1193_3_fu_475_p2[32'd15];

assign tmp_23_fu_537_p3 = sub_ln1193_4_fu_531_p2[32'd16];

assign tmp_24_fu_545_p3 = sub_ln1193_4_fu_531_p2[32'd15];

assign tmp_2_fu_1060_p4 = {{mul_ln1118_fu_2184_p2[34:27]}};

assign tmp_32_fu_1344_p3 = mul_ln1118_reg_2325[32'd25];

assign tmp_34_fu_1359_p3 = add_ln415_fu_1354_p2[32'd15];

assign tmp_35_fu_1379_p3 = add_ln415_fu_1354_p2[32'd15];

assign tmp_36_fu_1393_p3 = mul_ln1118_reg_2325[32'd26];

assign tmp_38_fu_1512_p3 = mul_ln1118_1_reg_2364[32'd25];

assign tmp_3_fu_617_p4 = {{sub_ln1193_1_fu_363_p2[15:6]}};

assign tmp_40_fu_1527_p3 = add_ln415_1_fu_1522_p2[32'd15];

assign tmp_41_fu_1547_p3 = add_ln415_1_fu_1522_p2[32'd15];

assign tmp_42_fu_1561_p3 = mul_ln1118_1_reg_2364[32'd26];

assign tmp_44_fu_1680_p3 = mul_ln1118_2_reg_2403[32'd25];

assign tmp_46_fu_1695_p3 = add_ln415_2_fu_1690_p2[32'd15];

assign tmp_47_fu_1715_p3 = add_ln415_2_fu_1690_p2[32'd15];

assign tmp_48_fu_1729_p3 = mul_ln1118_2_reg_2403[32'd26];

assign tmp_4_fu_1075_p4 = {{mul_ln1118_fu_2184_p2[34:26]}};

assign tmp_50_fu_1848_p3 = mul_ln1118_3_reg_2442[32'd25];

assign tmp_52_fu_1863_p3 = add_ln415_3_fu_1858_p2[32'd15];

assign tmp_53_fu_1883_p3 = add_ln415_3_fu_1858_p2[32'd15];

assign tmp_54_fu_1897_p3 = mul_ln1118_3_reg_2442[32'd26];

assign tmp_56_fu_2016_p3 = mul_ln1118_4_reg_2481[32'd25];

assign tmp_58_fu_2031_p3 = add_ln415_4_fu_2026_p2[32'd15];

assign tmp_59_fu_2051_p3 = add_ln415_4_fu_2026_p2[32'd15];

assign tmp_5_fu_651_p4 = {{sub_ln1193_2_fu_419_p2[15:6]}};

assign tmp_60_fu_2065_p3 = mul_ln1118_4_reg_2481[32'd26];

assign tmp_6_fu_1137_p4 = {{mul_ln1118_1_fu_2195_p2[34:26]}};

assign tmp_7_fu_685_p4 = {{sub_ln1193_3_fu_475_p2[15:6]}};

assign tmp_8_fu_1184_p4 = {{mul_ln1118_2_fu_2206_p2[34:27]}};

assign tmp_9_fu_719_p4 = {{sub_ln1193_4_fu_531_p2[15:6]}};

assign tmp_fu_1122_p4 = {{mul_ln1118_1_fu_2195_p2[34:27]}};

assign tmp_s_fu_991_p4 = {{p_Val2_19_fu_948_p2[17:8]}};

assign underflow_1_fu_967_p2 = (xor_ln786_6_fu_961_p2 & p_Result_17_fu_940_p3);

assign underflow_fu_875_p2 = (xor_ln786_5_fu_869_p2 & p_Result_15_fu_847_p3);

assign x_max_V_fu_291_p1 = data_4_V_read;

assign x_max_V_fu_291_p3 = ((icmp_ln1496_3_fu_285_p2[0:0] === 1'b1) ? x_max_V_fu_291_p1 : select_ln66_2_fu_277_p3);

assign xor_ln340_10_fu_881_p2 = (p_Result_16_fu_861_p3 ^ p_Result_15_fu_847_p3);

assign xor_ln340_11_fu_887_p2 = (p_Result_15_fu_847_p3 ^ 1'd1);

assign xor_ln340_12_fu_973_p2 = (p_Result_18_fu_953_p3 ^ p_Result_17_fu_940_p3);

assign xor_ln340_13_fu_979_p2 = (p_Result_17_fu_940_p3 ^ 1'd1);

assign xor_ln340_1_fu_403_p2 = (tmp_17_fu_369_p3 ^ 1'd1);

assign xor_ln340_2_fu_459_p2 = (tmp_19_fu_425_p3 ^ 1'd1);

assign xor_ln340_3_fu_515_p2 = (tmp_21_fu_481_p3 ^ 1'd1);

assign xor_ln340_4_fu_571_p2 = (tmp_23_fu_537_p3 ^ 1'd1);

assign xor_ln340_5_fu_341_p2 = (tmp_16_fu_321_p3 ^ tmp_15_fu_313_p3);

assign xor_ln340_6_fu_397_p2 = (tmp_18_fu_377_p3 ^ tmp_17_fu_369_p3);

assign xor_ln340_7_fu_453_p2 = (tmp_20_fu_433_p3 ^ tmp_19_fu_425_p3);

assign xor_ln340_8_fu_509_p2 = (tmp_22_fu_489_p3 ^ tmp_21_fu_481_p3);

assign xor_ln340_9_fu_565_p2 = (tmp_24_fu_545_p3 ^ tmp_23_fu_537_p3);

assign xor_ln340_fu_347_p2 = (tmp_15_fu_313_p3 ^ 1'd1);

assign xor_ln416_1_fu_1535_p2 = (tmp_40_fu_1527_p3 ^ 1'd1);

assign xor_ln416_2_fu_1703_p2 = (tmp_46_fu_1695_p3 ^ 1'd1);

assign xor_ln416_3_fu_1871_p2 = (tmp_52_fu_1863_p3 ^ 1'd1);

assign xor_ln416_4_fu_2039_p2 = (tmp_58_fu_2031_p3 ^ 1'd1);

assign xor_ln416_fu_1367_p2 = (tmp_34_fu_1359_p3 ^ 1'd1);

assign xor_ln779_1_fu_1568_p2 = (tmp_42_fu_1561_p3 ^ 1'd1);

assign xor_ln779_2_fu_1736_p2 = (tmp_48_fu_1729_p3 ^ 1'd1);

assign xor_ln779_3_fu_1904_p2 = (tmp_54_fu_1897_p3 ^ 1'd1);

assign xor_ln779_4_fu_2072_p2 = (tmp_60_fu_2065_p3 ^ 1'd1);

assign xor_ln779_fu_1400_p2 = (tmp_36_fu_1393_p3 ^ 1'd1);

assign xor_ln785_1_fu_1435_p2 = (tmp_31_reg_2331 ^ 1'd1);

assign xor_ln785_2_fu_1591_p2 = (select_ln777_1_fu_1555_p3 ^ 1'd1);

assign xor_ln785_3_fu_1603_p2 = (tmp_37_reg_2370 ^ 1'd1);

assign xor_ln785_4_fu_1759_p2 = (select_ln777_2_fu_1723_p3 ^ 1'd1);

assign xor_ln785_5_fu_1771_p2 = (tmp_43_reg_2409 ^ 1'd1);

assign xor_ln785_6_fu_1927_p2 = (select_ln777_3_fu_1891_p3 ^ 1'd1);

assign xor_ln785_7_fu_1939_p2 = (tmp_49_reg_2448 ^ 1'd1);

assign xor_ln785_8_fu_2095_p2 = (select_ln777_4_fu_2059_p3 ^ 1'd1);

assign xor_ln785_9_fu_2107_p2 = (tmp_55_reg_2487 ^ 1'd1);

assign xor_ln785_fu_1423_p2 = (select_ln777_fu_1387_p3 ^ 1'd1);

assign xor_ln786_10_fu_1962_p2 = (or_ln786_3_fu_1956_p2 ^ 1'd1);

assign xor_ln786_11_fu_2130_p2 = (or_ln786_4_fu_2124_p2 ^ 1'd1);

assign xor_ln786_1_fu_385_p2 = (tmp_18_fu_377_p3 ^ 1'd1);

assign xor_ln786_2_fu_441_p2 = (tmp_20_fu_433_p3 ^ 1'd1);

assign xor_ln786_3_fu_497_p2 = (tmp_22_fu_489_p3 ^ 1'd1);

assign xor_ln786_4_fu_553_p2 = (tmp_24_fu_545_p3 ^ 1'd1);

assign xor_ln786_5_fu_869_p2 = (p_Result_16_fu_861_p3 ^ 1'd1);

assign xor_ln786_6_fu_961_p2 = (p_Result_18_fu_953_p3 ^ 1'd1);

assign xor_ln786_7_fu_1458_p2 = (or_ln786_fu_1452_p2 ^ 1'd1);

assign xor_ln786_8_fu_1626_p2 = (or_ln786_1_fu_1620_p2 ^ 1'd1);

assign xor_ln786_9_fu_1794_p2 = (or_ln786_2_fu_1788_p2 ^ 1'd1);

assign xor_ln786_fu_329_p2 = (tmp_16_fu_321_p3 ^ 1'd1);

assign y_V_1_fu_643_p3 = ((or_ln340_1_fu_409_p2[0:0] === 1'b1) ? select_ln340_2_fu_627_p3 : select_ln388_1_fu_635_p3);

assign y_V_2_fu_677_p3 = ((or_ln340_2_fu_465_p2[0:0] === 1'b1) ? select_ln340_4_fu_661_p3 : select_ln388_2_fu_669_p3);

assign y_V_3_fu_711_p3 = ((or_ln340_3_fu_521_p2[0:0] === 1'b1) ? select_ln340_11_fu_695_p3 : select_ln388_3_fu_703_p3);

assign y_V_4_fu_745_p3 = ((or_ln340_4_fu_577_p2[0:0] === 1'b1) ? select_ln340_13_fu_729_p3 : select_ln388_4_fu_737_p3);

assign y_V_5_fu_1017_p3 = ((or_ln340_6_fu_985_p2[0:0] === 1'b1) ? select_ln340_19_fu_1001_p3 : select_ln388_11_fu_1009_p3);

assign y_V_fu_609_p3 = ((or_ln340_fu_353_p2[0:0] === 1'b1) ? select_ln340_fu_593_p3 : select_ln388_fu_601_p3);

assign zext_ln255_1_fu_757_p1 = y_V_1_reg_2244;

assign zext_ln255_2_fu_761_p1 = y_V_2_reg_2249;

assign zext_ln255_3_fu_765_p1 = y_V_3_reg_2254;

assign zext_ln255_4_fu_769_p1 = y_V_4_reg_2259_pp0_iter1_reg;

assign zext_ln255_fu_753_p1 = y_V_reg_2239;

assign zext_ln265_fu_1025_p1 = y_V_5_fu_1017_p3;

assign zext_ln415_1_fu_1519_p1 = tmp_39_reg_2381;

assign zext_ln415_2_fu_1687_p1 = tmp_45_reg_2420;

assign zext_ln415_3_fu_1855_p1 = tmp_51_reg_2459;

assign zext_ln415_4_fu_2023_p1 = tmp_57_reg_2498;

assign zext_ln415_fu_1351_p1 = tmp_33_reg_2342;

endmodule //softmax_stable_ap_fixed_ap_fixed_16_6_0_0_0_Softmax_config18_s
